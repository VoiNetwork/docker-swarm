#!/bin/bash

source "${HOME}/voi/bin/.helpers/util.sh"

util_validate_supported_node_type "participation"
util_validate_running_container

is_root=0

execute_sudo() {
  if [[ ${is_root} -eq 1 ]]; then
    bash -c "$*"
  else
    sudo bash -c "$*"
  fi
}

get_algod_token() {
  algod_token=$(execute_sudo 'cat /var/lib/voi/algod/data/algod.token')
}

get_last_committed_block() {
  docker exec -it "${CONTAINER_ID}" bash -c "/node/bin/goal node status | grep 'Last committed block' | cut -d' ' -f4 | tr -cd '[:digit:]'"
}

get_accounts() {
  if execute_sudo 'test ! -f "/var/lib/voi/algod/data/voimain-v1.0/accountList.json"'; then
    util_abort "Account list not found. Exiting the program."
  fi

  accounts_json=$(execute_sudo 'cat /var/lib/voi/algod/data/voimain-v1.0/accountList.json')
  number_of_accounts=$(echo "${accounts_json}" | jq '.Accounts | length')

  if [[ $number_of_accounts -eq 0 ]]; then
    return 1
  fi

  account_addresses=$(echo "$accounts_json" | jq -r '.Accounts | keys[]')
  echo "${account_addresses}"
}

get_participation_expiration_eta() {
  local active_key_last_valid_round=$1
  local last_committed_block=$2

  if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then
    echo "Both arguments must be integers. Exiting."
    exit 1
  fi

  local current_key_blocks_remaining=$((active_key_last_valid_round - last_committed_block))
  local remaining_seconds
  local current_timestamp
  local expiration_timestamp
  local expiration_date

  remaining_seconds=$(echo "${current_key_blocks_remaining}*2.9" | bc)
  current_timestamp=$(date +%s)
  expiration_timestamp=$(echo "${current_timestamp}+${remaining_seconds}" | bc)

  # Convert the new timestamp to a date and time
  expiration_date=$(date -d "@${expiration_timestamp}" '+%Y-%m-%d %H:%M')

  echo "${expiration_date}"
}

display_account_information() {
  local account_address=$1
  local account_details
  account_details=$(docker exec -it "${CONTAINER_ID}" bash -c "curl -X GET -H 'Content-Type: application/json' -H 'X-Algo-API-Token: ${algod_token}' http://localhost:8080/v2/accounts/${account_address}")

  echo "Address: ${account_address}"
  echo "Balance: $(echo "${account_details}" | jq -r '.amount') microVoi"

  local existing_expiration_date
  local active_key_last_valid_round
  local last_committed_block
  last_committed_block=$(get_last_committed_block)

  ## This is a workaround to get the last valid round of the active participation key that is installed on the system.
  ## If using REST API we will get key for last online transaction, which is valid for other usecases
  active_key_last_valid_round=$(docker exec -it "${CONTAINER_ID}" bash -c '/node/bin/goal account listpartkeys' | awk -v addr="${account_address}" '$1=="yes" && substr($2, 1, 4) == substr(addr, 1, 4) && substr($2, length($2)-3) == substr(addr, length(addr)-3) {print $6}' | tr -cd '[:digit:]')

  if [[ -z "${active_key_last_valid_round}" ]]; then
    echo "Participation status: No active participation key found."
    return 1
  fi

  existing_expiration_date=$(get_participation_expiration_eta "${active_key_last_valid_round}" "${last_committed_block}")

  echo "Participation status: $(docker exec -it "${CONTAINER_ID}" bash -c '/node/bin/goal account dump -a '"${account_address}"' | jq -r '\''if (.onl == 1) then "online" else "offline" end'\''')"
  echo "Participation key expires at block: ${active_key_last_valid_round} (last committed: ${last_committed_block})"
  echo "Participation key expected to expire at: ${existing_expiration_date}"
}

if [ -z "${CONTAINER_ID}" ]; then
    echo "AVM container is not running. Please start it first."
    exit 1
fi

if [[ $(id -u) -eq 0 ]]; then
  is_root=1
else
  echo "Checking for sudo access, you may be prompted for your password."
  if ! sudo -v &> /dev/null; then
    util_abort "User does not have sudo access. Please run this script as a user with sudo access."
  fi
fi

declare -A health_checks

if [[ $(docker exec -it "${CONTAINER_ID}" bash -c "/node/bin/goal node status") ]]; then
    health_checks["Daemon running"]="true"
else
    health_checks["Daemon running"]="false"
fi

if [[ $(docker exec "${CONTAINER_ID}" bash -c "curl -fs http://localhost:8080/health") ]]; then
    health_checks["Daemon healthy"]="true"
else
    health_checks["Daemon healthy"]="false"
fi

if [[ $(docker exec "${CONTAINER_ID}" bash -c "curl -fs http://localhost:8080/ready") ]]; then
    health_checks["Daemon ready (and caught up)"]="true"
else
    health_checks["Daemon ready (and caught up)"]="false"
fi

get_algod_token

echo "Voi Swarm Docker status:"
echo "**************"
swarm_running_image=$(docker inspect --format='{{.Image}}' "${CONTAINER_ID}" | cut -d':' -f2)
echo "Running container image (sha256): ${swarm_running_image}"
echo "Auto-update enabled: $(awk -F'=' '/swarm.cronjob.enable=/ {print $2}' "${HOME}"/voi/docker/compose.yml)"
echo "Auto-update schedule (cron format): $(awk -F'=' '/swarm.cronjob.schedule=/ {print $2}' "${HOME}"/voi/docker/compose.yml)"
echo ""

echo "AVM version:"
echo "**************"
algod_version=$(docker exec -it "${CONTAINER_ID}" bash -c '/node/bin/goal version -v')
echo "${algod_version}"
echo ""

echo "Node health checks:"
echo "**************"
for check in "${!health_checks[@]}"; do
  echo "$check: ${health_checks[$check]}"
done
echo ""

echo "Account status:"
echo "**************"
account_addresses=$(get_accounts)
if [[ $? -eq 1 ]]; then
  echo "No accounts were found."
  echo ""
else
  for account in ${account_addresses}; do
    display_account_information "${account}"
    echo ""
  done
fi

echo "Telemetry status:"
echo "**************"
echo "Enabled: $(execute_sudo "cat /var/lib/voi/algod/data/logging.config | jq -r .Enable")"
echo "Name: $(execute_sudo "cat /var/lib/voi/algod/data/logging.config | jq -r .Name")"
echo "Short GUID: $(execute_sudo "cat /var/lib/voi/algod/data/logging.config | jq -r .GUID | cut -c 1-13")"
